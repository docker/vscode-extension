name: Build
run-name: "Build: ${{ github.event_name != 'workflow_dispatch' && 'Automatic' || 'Release' }}"

on:
  push:
    branches:
      - '**'
    tags:
      - v*
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - '**/*.md'
  workflow_dispatch:

jobs:
  test-latest:
    runs-on: ubuntu-latest

    steps:
      - name: actions/checkout@v4 (docker/docker-language-server)
        uses: actions/checkout@v4
        with:
          repository: docker/docker-language-server
          path: docker-language-server

      - name: actions/checkout@v4 (docker/vscode-extension)
        uses: actions/checkout@v4
        with:
          repository: docker/vscode-extension
          path: vscode-extension

      - uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - uses: actions/setup-go@v5
        with:
          go-version: '1.23.8'

      - run: npm install
        working-directory: vscode-extension

      - run: rm -rf vscode-extension/bin

      - run: mkdir vscode-extension/bin

      - run: make build
        working-directory: docker-language-server

      - run: mv docker-language-server/docker-language-server-linux-amd64 vscode-extension/bin

      - run: sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

      - run: xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npm test
        working-directory: vscode-extension

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: /tmp/test-resources/screenshots/

  test-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - run: npm install

      - run: sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0

      - run: xvfb-run --auto-servernum --server-args='-screen 0 1920x1080x24' npm test

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: /tmp/test-resources/screenshots/

  upload:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs:
      - test-latest
      - test-release

    strategy:
      matrix:
        os: [alpine, linux, win32, darwin]
        nodearch: [x64, arm64]
        include:
          - os: win32
            nodeos: win32
            ext: .exe
          - os: darwin
            nodeos: darwin
            ext: ''
          - os: linux
            nodeos: linux
            ext: ''
          - os: alpine
            nodeos: linux
            ext: ''

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - run: |
          NODE_OS=${{ matrix.nodeos }} NODE_ARCH=${{ matrix.nodearch }} npm install

      - name: Set variables
        id: set-variables
        run: |
          VERSION=$(npm pkg get version | tr -d \")
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

          SHA=$(git rev-parse --short HEAD)
          echo "SHA=$SHA" >> "$GITHUB_OUTPUT"

      - name: Generate ./src/secrets.ts
        shell: bash
        env:
          TELEMETRY_HOST: ${{ vars.TELEMETRY_HOST }}
          TELEMETRY_PATH: ${{ vars.TELEMETRY_PATH }}
          TELEMETRY_KEY: ${{ secrets.TELEMETRY_KEY }}
          BUGSNAG_API_KEY: ${{ secrets.BUGSNAG_API_KEY }}
        run: |
          node -e "
          const fs = require('fs');
          const content = \`export const SECRETS = {
            TELEMETRY_HOST: '\${process.env.TELEMETRY_HOST}',
            TELEMETRY_PATH: '\${process.env.TELEMETRY_PATH}',
            TELEMETRY_KEY: '\${process.env.TELEMETRY_KEY}',
            BUGSNAG_API_KEY: '\${process.env.BUGSNAG_API_KEY}',
          } as const;
          \`;
          fs.writeFileSync('src/secrets.ts', content);
          "

      - name: Build the extension
        env:
          VERSION: ${{ steps.set-variables.outputs.VERSION }}
          SHA: ${{ steps.set-variables.outputs.SHA }}
        run: |
          npm install -g @vscode/vsce
          vsce package --target ${{ matrix.os }}-${{ matrix.nodearch }} -o docker-vscode-extension-${{ matrix.os }}-${{ matrix.nodearch }}-$VERSION-$SHA.vsix

      - uses: actions/upload-artifact@v4
        with:
          name: docker-vscode-extension-${{ matrix.os }}-${{ matrix.nodearch }}-${{ steps.set-variables.outputs.VERSION }}-${{ steps.set-variables.outputs.SHA }}.vsix
          path: docker-vscode-extension-${{ matrix.os }}-${{ matrix.nodearch }}-${{ steps.set-variables.outputs.VERSION }}-${{ steps.set-variables.outputs.SHA }}.vsix
          if-no-files-found: error

  create-release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs:
      - test-latest
      - test-release

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Set variables
        id: set-variables
        run: |
          VERSION=$(npm pkg get version | tr -d \")
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Generate release notes
        run: |
          node build/releaser.mjs generate-release-notes > release-notes.tmp

      - name: Get current date
        id: date
        run: echo "current_date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8 https://github.com/softprops/action-gh-release/commit/c062e08bd532815e2082a85e87e3ef29c3e6d191
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: v${{ steps.set-variables.outputs.version }} - ${{ steps.date.outputs.current_date }}
          tag_name: v${{ steps.set-variables.outputs.version }}
          body_path: release-notes.tmp
          fail_on_unmatched_files: true

  upload-release-binaries:
    runs-on: ubuntu-latest
    needs:
      - create-release

    strategy:
      matrix:
        os: [alpine, linux, win32, darwin]
        nodearch: [x64, arm64]
        include:
          - os: win32
            nodeos: win32
            ext: .exe
          - os: darwin
            nodeos: darwin
            ext: ''
          - os: linux
            nodeos: linux
            ext: ''
          - os: alpine
            nodeos: linux
            ext: ''

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - run: |
          NODE_OS=${{ matrix.nodeos }} NODE_ARCH=${{ matrix.nodearch }} npm install

      - name: Set variables
        id: set-variables
        run: |
          VERSION=$(npm pkg get version | tr -d \")
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Generate ./src/secrets.ts
        shell: bash
        env:
          TELEMETRY_HOST: ${{ vars.TELEMETRY_HOST }}
          TELEMETRY_PATH: ${{ vars.TELEMETRY_PATH }}
          TELEMETRY_KEY: ${{ secrets.TELEMETRY_KEY }}
          BUGSNAG_API_KEY: ${{ secrets.BUGSNAG_API_KEY }}
        run: |
          node -e "
          const fs = require('fs');
          const content = \`export const SECRETS = {
            TELEMETRY_HOST: '\${process.env.TELEMETRY_HOST}',
            TELEMETRY_PATH: '\${process.env.TELEMETRY_PATH}',
            TELEMETRY_KEY: '\${process.env.TELEMETRY_KEY}',
            BUGSNAG_API_KEY: '\${process.env.BUGSNAG_API_KEY}',
          } as const;
          \`;
          fs.writeFileSync('src/secrets.ts', content);
          "

      - name: Build the extension
        env:
          VERSION: ${{ steps.set-variables.outputs.VERSION }}
        run: |
          npm install -g @vscode/vsce
          vsce package --target ${{ matrix.os }}-${{ matrix.nodearch }} -o docker-vscode-extension-${{ matrix.os }}-${{ matrix.nodearch }}-$VERSION.vsix

      - uses: actions/upload-artifact@v4
        with:
          name: docker-vscode-extension-${{ matrix.os }}-${{ matrix.nodearch }}-${{ steps.set-variables.outputs.VERSION }}.vsix
          path: docker-vscode-extension-${{ matrix.os }}-${{ matrix.nodearch }}-${{ steps.set-variables.outputs.VERSION }}.vsix
          if-no-files-found: error

      - uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8 https://github.com/softprops/action-gh-release/commit/c062e08bd532815e2082a85e87e3ef29c3e6d191
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.set-variables.outputs.version }}
          files: docker-vscode-extension-${{ matrix.os }}-${{ matrix.nodearch }}-${{ steps.set-variables.outputs.VERSION }}.vsix
          if-no-files-found: error
